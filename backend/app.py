import os
from flask import Flask, send_from_directory, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
from routes import api_bp
import requests

# Load environment variables from .env file
load_dotenv()

# Path to the static frontend build
FRONTEND_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'frontend')

# Create the Flask app
app = Flask(__name__, static_folder=FRONTEND_FOLDER, static_url_path='')

# Enable CORS for API endpoints
CORS(app)

# Register API blueprint
app.register_blueprint(api_bp)

# Serve index.html for the root and all frontend routes
@app.route('/')
@app.route('/about')
@app.route('/chat')
@app.route('/alerts')
@app.route('/contact')
@app.route('/resources')
def serve_index():
    """
    Serve the main React index.html for the root and all frontend routes.
    """
    return send_from_directory(FRONTEND_FOLDER, 'index.html')

# Serve static files (JS, CSS, images, etc.)
@app.route('/<path:path>')
def serve_static(path):
    """
    Serve static files generated by the React build (Next.js export).
    """
    file_path = os.path.join(FRONTEND_FOLDER, path)
    if os.path.isfile(file_path):
        return send_from_directory(FRONTEND_FOLDER, path)
    else:
        # For client-side routing, serve index.html
        return send_from_directory(FRONTEND_FOLDER, 'index.html')

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")


@app.route("/chat", methods=["POST"])
def chat():
    data = request.get_json()
    user_message = data.get("message", "")

    # Check if it's a weather question
    if "weather" in user_message.lower():
        weather = get_weather()
        return jsonify({"reply": f"üå§Ô∏è Weather Update: {weather}"})

    # Otherwise, call Gemini
    reply = get_gemini_reply(user_message)
    return jsonify({"reply": reply})


def get_weather(city="Bharuch"):
    try:
        url = f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}&aqi=no"
        res = requests.get(url)
        data = res.json()
        condition = data['current']['condition']['text']
        temp = data['current']['temp_c']
        return f"It's currently {condition} and {temp}¬∞C in {city}."
    except Exception as e:
        return "Unable to fetch weather info right now."

def get_gemini_reply(prompt):
    try:
        import google.generativeai as genai
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel("models/gemini-1.5-flash-latest")
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"Gemini API error: {str(e)}"

if __name__ == "__main__":
    # Run the app on 0.0.0.0:5000 for external access
    app.run(host="0.0.0.0", port=5000, debug=True) 